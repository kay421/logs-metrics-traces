version: '3.8'

services:

  prometheus:
    container_name: prometheus
    env_file:
      - './.env'    
    image: prom/prometheus:v2.40.6
    volumes:
      - '${PROMETHUS_CONFIG_FILE_PATH_LOCAL}/${PROMETHUS_CONFIG_FILE}:${PROMETHUS_CONFIG_FILE_PATH}/${PROMETHUS_CONFIG_FILE}'
      - prometheus-docker-sd:/prometheus-docker-sd:ro
    command:
    - "--config.file=${PROMETHUS_CONFIG_FILE_PATH}/${PROMETHUS_CONFIG_FILE}"
    - --web.enable-remote-write-receiver
    - --enable-feature=exemplar-storage
    - "--web.console.libraries=/usr/share/prometheus/console_libraries"
    - "--web.console.templates=/usr/share/prometheus/consoles"
    ports:
      - ${PROMETHUS_PORT}:${PROMETHUS_PORT}

  prometheus-docker-sd:
    image: "stucky/prometheus-docker-sd:latest"
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - prometheus-docker-sd:/prometheus-docker-sd:rw

  loki:
    container_name: loki
    env_file:
      - './.env'
    image: 'grafana/loki:2.7.1'
    command: '-config.file=${LOKI_CONFIG_PATH}/${LOKI_CONFIG_FILE}'
    ports:
      - '${LOKI_PORT}:${LOKI_PORT}'

  tempo:
    container_name: tempo
    env_file:
      - './.env'
    image: 'grafana/tempo:1.5.0'
    volumes:
      - '${TEMPO_CONFIG_PATH_LOCAL}:${TEMPO_CONFIG_PATH}'
    command:
      - '-config.file=${TEMPO_CONFIG_PATH}/${TEMPO_CONFIG_FILE}'
      - '-config.expand-env=true'
    ports:
      - '${TEMPO_PORT}:${TEMPO_PORT}'

  promtail:
    container_name: promtail
    env_file:
    - './.env'
    image: grafana/promtail:2.7.1
    command:
      - '-config.file=${PROMTAIL_CONFIG_PATH}/${PROMTAIL_CONFIG_FILE}'
      - '-config.expand-env=true'
    volumes:
      - '${PROMTAIL_CONFIG_PATH_LOCAL}:${PROMTAIL_CONFIG_PATH}'
      # to read container labels and logs
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/containers:/var/lib/docker/containers

  grafana:
    container_name: grafana
    env_file:
      - './.env'
    image: 'grafana/grafana:9.3.1'
    volumes:
      - '${GRAFANA_CONFIG_PATH_LOCAL}:${GRAFANA_CONFIG_PATH}'
      - '${GRAFANA_DATASOURCES_PATH_LOCAL}:${GRAFANA_DATASOURCES_PATH}'
      - '${GRAFANA_DASHBOARDS_PROVISIONING_PATH_LOCAL}:${GRAFANA_DASHBOARDS_PROVISIONING_PATH}'
      - '${GRAFANA_DASHBOARDS_PATH_LOCAL}:${GRAFANA_DASHBOARDS_PATH}'
      - '${GRAFANA_PLUGINS_PATH_LOCAL}:${GRAFANA_PLUGINS_PATH}'
      - '${GRAFANA_PLUGINS_PROVISIONING_PATH_LOCAL}:${GRAFANA_PLUGINS_PROVISIONING_PATH}'
    entrypoint:
      - '${GRAFANA_HOME_PATH}/bin/grafana-server'
      - '--homepath=${GRAFANA_HOME_PATH}'
      - '--config=${GRAFANA_CONFIG_PATH}/${GRAFANA_CONFIG_FILE}'
    ports:
      - '${GRAFANA_PORT}:${GRAFANA_PORT}'

  backend:
    container_name: backend
    labels:
      prometheus-scrape.enabled: "true"
      prometheus-scrape.job_name: "container"
      prometheus-scrape.port: ${BACKEND_PORT}
      prometheus-scrape.metrics_path: "/metrics"
    env_file:
      - './.env'
    environment:
      - 'OTEL_EXPORTER_OTLP_ENDPOINT=http://${TEMPO_HOST}:${TEMPO_PORT_OTLP_RECEIVER}'
      - 'OTEL_EXPORTER_OTLP_TRACES_INSECURE=true'
      - 'OTEL_TRACES_SAMPLER_ARG=1.0'
      - 'OTEL_SERVICE_NAME=${BACKEND_SERVICE_NAME}'
    command:
      - '--address=${BACKEND_ADDRESS}'
    build:
      context: './demo/backend'
    ports:
      - '${BACKEND_PORT}:${BACKEND_PORT}'
    depends_on:
      - 'promtail'

volumes:
  prometheus-docker-sd:
