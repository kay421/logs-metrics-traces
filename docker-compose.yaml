version: '3.8'

services:

  prometheus:
    container_name: prometheus
    env_file:
      - './.env'
    image: prom/prometheus:v2.40.6
    volumes:
      - '${PROMETHEUS_CONFIG_FILE_PATH_LOCAL}/${PROMETHEUS_CONFIG_FILE}:${PROMETHEUS_CONFIG_FILE_PATH}/${PROMETHEUS_CONFIG_FILE}'
      - prometheus-docker-sd:/prometheus-docker-sd:ro
    command:
    - "--config.file=${PROMETHEUS_CONFIG_FILE_PATH}/${PROMETHEUS_CONFIG_FILE}"
    - --web.enable-remote-write-receiver
    - --enable-feature=exemplar-storage
    - "--web.console.libraries=/usr/share/prometheus/console_libraries"
    - "--web.console.templates=/usr/share/prometheus/consoles"
    ports:
      - ${PROMETHEUS_PORT}:${PROMETHEUS_PORT}
    networks:
      - demo

  prometheus-docker-sd:
    image: ghcr.io/kay421/prometheus-docker-sd/prometheus-docker-sd:latest
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - prometheus-docker-sd:/prometheus-docker-sd:rw
    networks:
      - demo

  loki:
    container_name: loki
    labels:
      prometheus-scrape.enabled: "false"
      service: "loki"
    env_file:
      - './.env'
    image: 'grafana/loki:2.7.1'
    command: '-config.file=${LOKI_CONFIG_PATH}/${LOKI_CONFIG_FILE}'
    ports:
      - '${LOKI_PORT}:${LOKI_PORT}'
    networks:
      - demo

  tempo:
    container_name: tempo
    labels:
      prometheus-scrape.enabled: "false"
      service: "tempo"
    env_file:
      - './.env'
    image: 'grafana/tempo:1.5.0'
    volumes:
      - '${TEMPO_CONFIG_PATH_LOCAL}:${TEMPO_CONFIG_PATH}'
    command:
      - '-config.file=${TEMPO_CONFIG_PATH}/${TEMPO_CONFIG_FILE}'
      - '-config.expand-env=true'
    ports:
      - '${TEMPO_PORT}:${TEMPO_PORT}'
      - '${TEMPO_PORT_OTLP_RECEIVER_GRPC}:${TEMPO_PORT_OTLP_RECEIVER_GRPC}'
      - '${TEMPO_PORT_OTLP_RECEIVER_HTTP}:${TEMPO_PORT_OTLP_RECEIVER_HTTP}'
    networks:
      - demo

  promtail:
    container_name: promtail
    labels:
      prometheus-scrape.enabled: "false"
      service: "promtail"
    env_file:
    - './.env'
    image: grafana/promtail:2.7.1
    command:
      - '-config.file=${PROMTAIL_CONFIG_PATH}/${PROMTAIL_CONFIG_FILE}'
      - '-config.expand-env=true'
    volumes:
      - '${PROMTAIL_CONFIG_PATH_LOCAL}:${PROMTAIL_CONFIG_PATH}'
      # to read container labels and logs
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/containers:/var/lib/docker/containers
    networks:
      - demo

  grafana:
    container_name: grafana
    labels:
      prometheus-scrape.enabled: "false"
      service: "grafana"
    env_file:
      - './.env'
    image: 'grafana/grafana:9.3.1'
    volumes:
      - '${GRAFANA_CONFIG_PATH_LOCAL}:${GRAFANA_CONFIG_PATH}'
      - '${GRAFANA_DATASOURCES_PATH_LOCAL}:${GRAFANA_DATASOURCES_PATH}'
      - '${GRAFANA_DASHBOARDS_PROVISIONING_PATH_LOCAL}:${GRAFANA_DASHBOARDS_PROVISIONING_PATH}'
      - '${GRAFANA_DASHBOARDS_PATH_LOCAL}:${GRAFANA_DASHBOARDS_PATH}'
      - '${GRAFANA_PLUGINS_PATH_LOCAL}:${GRAFANA_PLUGINS_PATH}'
      - '${GRAFANA_PLUGINS_PROVISIONING_PATH_LOCAL}:${GRAFANA_PLUGINS_PROVISIONING_PATH}'
    entrypoint:
      - '${GRAFANA_HOME_PATH}/bin/grafana-server'
      - '--homepath=${GRAFANA_HOME_PATH}'
      - '--config=${GRAFANA_CONFIG_PATH}/${GRAFANA_CONFIG_FILE}'
    ports:
      - '${GRAFANA_PORT}:${GRAFANA_PORT}'
    networks:
      - demo

  backend:
    container_name: backend
    labels:
      prometheus-scrape.enabled: "true"
      prometheus-scrape.job_name: "container"
      prometheus-scrape.port: ${BACKEND_PORT}
      prometheus-scrape.metrics_path: "/metrics"
      service: "backend"
      workload: "go-sample-application"
    env_file:
      - './.env'
    environment:
      - 'OTEL_EXPORTER_OTLP_ENDPOINT=http://${OTEL_COLLECTOR_HOST}:${OTEL_COLLECTOR_PORT_GRPC}'
      - 'OTEL_EXPORTER_OTLP_TRACES_INSECURE=true'
      - 'OTEL_TRACES_SAMPLER_ARG=1.0'
      - 'OTEL_SERVICE_NAME=${BACKEND_SERVICE_NAME}'
    command:
      - '--address=${BACKEND_ADDRESS}'
    build:
      context: './demo/backend'
    ports:
      - '${BACKEND_PORT}:${BACKEND_PORT}'
    depends_on:
      - 'promtail'
    networks:
        - demo

  envoy:
    container_name: envoy
    labels:
      prometheus-scrape.enabled: "true"
      prometheus-scrape.job_name: "container"
      prometheus-scrape.port: '${ENVOY_ADMIN_PORT}'
      prometheus-scrape.metrics_path: "/stats/prometheus"
      service: "envoy"
      workload: "envoy"
    env_file:
      - './.env'
    build:
      context: ./infra/envoy
    ports:
      - "${ENVOY_LISTENER_PORT}:${ENVOY_LISTENER_PORT}"
      - "${ENVOY_ADMIN_PORT}:${ENVOY_ADMIN_PORT}"
    networks:
        - demo

  otel-collector:
    container_name: otel-collector
    labels:
      prometheus-scrape.enabled: "false"
      service: "otel-collector"
    image: otel/opentelemetry-collector:0.67.0
    command:
      - "--config=${OTEL_COLLECTOR_CONFIG_PATH}/${OTEL_COLLECTOR_CONFIG_FILE}"
    env_file:
      - './.env'
    volumes:
      - '${OTEL_COLLECTOR_CONFIG_PATH_LOCAL}/${OTEL_COLLECTOR_CONFIG_FILE}:${OTEL_COLLECTOR_CONFIG_PATH}/${OTEL_COLLECTOR_CONFIG_FILE}'
    ports:
      - "1${OTEL_COLLECTOR_PORT_GRPC}:${OTEL_COLLECTOR_PORT_GRPC}"
    networks:
      - demo

volumes:
  prometheus-docker-sd:

networks:
    demo:
